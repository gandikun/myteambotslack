// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ArInternalMetadatum is an object representing the database table.
type ArInternalMetadatum struct {
	Key       string      `boil:"key" json:"key" toml:"key" yaml:"key"`
	Value     null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *arInternalMetadatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L arInternalMetadatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArInternalMetadatumColumns = struct {
	Key       string
	Value     string
	CreatedAt string
	UpdatedAt string
}{
	Key:       "key",
	Value:     "value",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ArInternalMetadatumWhere = struct {
	Key       whereHelperstring
	Value     whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	Key:       whereHelperstring{field: `key`},
	Value:     whereHelpernull_String{field: `value`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	UpdatedAt: whereHelpertime_Time{field: `updated_at`},
}

// ArInternalMetadatumRels is where relationship names are stored.
var ArInternalMetadatumRels = struct {
}{}

// arInternalMetadatumR is where relationships are stored.
type arInternalMetadatumR struct {
}

// NewStruct creates a new relationship struct
func (*arInternalMetadatumR) NewStruct() *arInternalMetadatumR {
	return &arInternalMetadatumR{}
}

// arInternalMetadatumL is where Load methods for each relationship are stored.
type arInternalMetadatumL struct{}

var (
	arInternalMetadatumColumns               = []string{"key", "value", "created_at", "updated_at"}
	arInternalMetadatumColumnsWithoutDefault = []string{"key", "value", "created_at", "updated_at"}
	arInternalMetadatumColumnsWithDefault    = []string{}
	arInternalMetadatumPrimaryKeyColumns     = []string{"key"}
)

type (
	// ArInternalMetadatumSlice is an alias for a slice of pointers to ArInternalMetadatum.
	// This should generally be used opposed to []ArInternalMetadatum.
	ArInternalMetadatumSlice []*ArInternalMetadatum
	// ArInternalMetadatumHook is the signature for custom ArInternalMetadatum hook methods
	ArInternalMetadatumHook func(boil.Executor, *ArInternalMetadatum) error

	arInternalMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	arInternalMetadatumType                 = reflect.TypeOf(&ArInternalMetadatum{})
	arInternalMetadatumMapping              = queries.MakeStructMapping(arInternalMetadatumType)
	arInternalMetadatumPrimaryKeyMapping, _ = queries.BindMapping(arInternalMetadatumType, arInternalMetadatumMapping, arInternalMetadatumPrimaryKeyColumns)
	arInternalMetadatumInsertCacheMut       sync.RWMutex
	arInternalMetadatumInsertCache          = make(map[string]insertCache)
	arInternalMetadatumUpdateCacheMut       sync.RWMutex
	arInternalMetadatumUpdateCache          = make(map[string]updateCache)
	arInternalMetadatumUpsertCacheMut       sync.RWMutex
	arInternalMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var arInternalMetadatumBeforeInsertHooks []ArInternalMetadatumHook
var arInternalMetadatumBeforeUpdateHooks []ArInternalMetadatumHook
var arInternalMetadatumBeforeDeleteHooks []ArInternalMetadatumHook
var arInternalMetadatumBeforeUpsertHooks []ArInternalMetadatumHook

var arInternalMetadatumAfterInsertHooks []ArInternalMetadatumHook
var arInternalMetadatumAfterSelectHooks []ArInternalMetadatumHook
var arInternalMetadatumAfterUpdateHooks []ArInternalMetadatumHook
var arInternalMetadatumAfterDeleteHooks []ArInternalMetadatumHook
var arInternalMetadatumAfterUpsertHooks []ArInternalMetadatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ArInternalMetadatum) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ArInternalMetadatum) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ArInternalMetadatum) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ArInternalMetadatum) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ArInternalMetadatum) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ArInternalMetadatum) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ArInternalMetadatum) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ArInternalMetadatum) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ArInternalMetadatum) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range arInternalMetadatumAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArInternalMetadatumHook registers your hook function for all future operations.
func AddArInternalMetadatumHook(hookPoint boil.HookPoint, arInternalMetadatumHook ArInternalMetadatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		arInternalMetadatumBeforeInsertHooks = append(arInternalMetadatumBeforeInsertHooks, arInternalMetadatumHook)
	case boil.BeforeUpdateHook:
		arInternalMetadatumBeforeUpdateHooks = append(arInternalMetadatumBeforeUpdateHooks, arInternalMetadatumHook)
	case boil.BeforeDeleteHook:
		arInternalMetadatumBeforeDeleteHooks = append(arInternalMetadatumBeforeDeleteHooks, arInternalMetadatumHook)
	case boil.BeforeUpsertHook:
		arInternalMetadatumBeforeUpsertHooks = append(arInternalMetadatumBeforeUpsertHooks, arInternalMetadatumHook)
	case boil.AfterInsertHook:
		arInternalMetadatumAfterInsertHooks = append(arInternalMetadatumAfterInsertHooks, arInternalMetadatumHook)
	case boil.AfterSelectHook:
		arInternalMetadatumAfterSelectHooks = append(arInternalMetadatumAfterSelectHooks, arInternalMetadatumHook)
	case boil.AfterUpdateHook:
		arInternalMetadatumAfterUpdateHooks = append(arInternalMetadatumAfterUpdateHooks, arInternalMetadatumHook)
	case boil.AfterDeleteHook:
		arInternalMetadatumAfterDeleteHooks = append(arInternalMetadatumAfterDeleteHooks, arInternalMetadatumHook)
	case boil.AfterUpsertHook:
		arInternalMetadatumAfterUpsertHooks = append(arInternalMetadatumAfterUpsertHooks, arInternalMetadatumHook)
	}
}

// OneG returns a single arInternalMetadatum record from the query using the global executor.
func (q arInternalMetadatumQuery) OneG() (*ArInternalMetadatum, error) {
	return q.One(boil.GetDB())
}

// One returns a single arInternalMetadatum record from the query.
func (q arInternalMetadatumQuery) One(exec boil.Executor) (*ArInternalMetadatum, error) {
	o := &ArInternalMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ar_internal_metadata")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ArInternalMetadatum records from the query using the global executor.
func (q arInternalMetadatumQuery) AllG() (ArInternalMetadatumSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ArInternalMetadatum records from the query.
func (q arInternalMetadatumQuery) All(exec boil.Executor) (ArInternalMetadatumSlice, error) {
	var o []*ArInternalMetadatum

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ArInternalMetadatum slice")
	}

	if len(arInternalMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ArInternalMetadatum records in the query, and panics on error.
func (q arInternalMetadatumQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ArInternalMetadatum records in the query.
func (q arInternalMetadatumQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ar_internal_metadata rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q arInternalMetadatumQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q arInternalMetadatumQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ar_internal_metadata exists")
	}

	return count > 0, nil
}

// ArInternalMetadata retrieves all the records using an executor.
func ArInternalMetadata(mods ...qm.QueryMod) arInternalMetadatumQuery {
	mods = append(mods, qm.From("`ar_internal_metadata`"))
	return arInternalMetadatumQuery{NewQuery(mods...)}
}

// FindArInternalMetadatumG retrieves a single record by ID.
func FindArInternalMetadatumG(key string, selectCols ...string) (*ArInternalMetadatum, error) {
	return FindArInternalMetadatum(boil.GetDB(), key, selectCols...)
}

// FindArInternalMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArInternalMetadatum(exec boil.Executor, key string, selectCols ...string) (*ArInternalMetadatum, error) {
	arInternalMetadatumObj := &ArInternalMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ar_internal_metadata` where `key`=?", sel,
	)

	q := queries.Raw(query, key)

	err := q.Bind(nil, exec, arInternalMetadatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ar_internal_metadata")
	}

	return arInternalMetadatumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ArInternalMetadatum) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ArInternalMetadatum) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ar_internal_metadata provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(arInternalMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	arInternalMetadatumInsertCacheMut.RLock()
	cache, cached := arInternalMetadatumInsertCache[key]
	arInternalMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			arInternalMetadatumColumns,
			arInternalMetadatumColumnsWithDefault,
			arInternalMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(arInternalMetadatumType, arInternalMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(arInternalMetadatumType, arInternalMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ar_internal_metadata` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ar_internal_metadata` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ar_internal_metadata` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, arInternalMetadatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ar_internal_metadata")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Key,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ar_internal_metadata")
	}

CacheNoHooks:
	if !cached {
		arInternalMetadatumInsertCacheMut.Lock()
		arInternalMetadatumInsertCache[key] = cache
		arInternalMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ArInternalMetadatum record using the global executor.
// See Update for more documentation.
func (o *ArInternalMetadatum) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ArInternalMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ArInternalMetadatum) Update(exec boil.Executor, columns boil.Columns) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	arInternalMetadatumUpdateCacheMut.RLock()
	cache, cached := arInternalMetadatumUpdateCache[key]
	arInternalMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			arInternalMetadatumColumns,
			arInternalMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update ar_internal_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ar_internal_metadata` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, arInternalMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(arInternalMetadatumType, arInternalMetadatumMapping, append(wl, arInternalMetadatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update ar_internal_metadata row")
	}

	if !cached {
		arInternalMetadatumUpdateCacheMut.Lock()
		arInternalMetadatumUpdateCache[key] = cache
		arInternalMetadatumUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q arInternalMetadatumQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q arInternalMetadatumQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for ar_internal_metadata")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ArInternalMetadatumSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArInternalMetadatumSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), arInternalMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ar_internal_metadata` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, arInternalMetadatumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in arInternalMetadatum slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ArInternalMetadatum) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLArInternalMetadatumUniqueColumns = []string{
	"key",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ArInternalMetadatum) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ar_internal_metadata provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(arInternalMetadatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLArInternalMetadatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	arInternalMetadatumUpsertCacheMut.RLock()
	cache, cached := arInternalMetadatumUpsertCache[key]
	arInternalMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			arInternalMetadatumColumns,
			arInternalMetadatumColumnsWithDefault,
			arInternalMetadatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			arInternalMetadatumColumns,
			arInternalMetadatumPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ar_internal_metadata, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "ar_internal_metadata", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ar_internal_metadata` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(arInternalMetadatumType, arInternalMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(arInternalMetadatumType, arInternalMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ar_internal_metadata")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(arInternalMetadatumType, arInternalMetadatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ar_internal_metadata")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ar_internal_metadata")
	}

CacheNoHooks:
	if !cached {
		arInternalMetadatumUpsertCacheMut.Lock()
		arInternalMetadatumUpsertCache[key] = cache
		arInternalMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ArInternalMetadatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ArInternalMetadatum) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ArInternalMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ArInternalMetadatum) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ArInternalMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), arInternalMetadatumPrimaryKeyMapping)
	sql := "DELETE FROM `ar_internal_metadata` WHERE `key`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from ar_internal_metadata")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q arInternalMetadatumQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no arInternalMetadatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from ar_internal_metadata")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o ArInternalMetadatumSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArInternalMetadatumSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ArInternalMetadatum slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(arInternalMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), arInternalMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ar_internal_metadata` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, arInternalMetadatumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from arInternalMetadatum slice")
	}

	if len(arInternalMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ArInternalMetadatum) ReloadG() error {
	if o == nil {
		return errors.New("models: no ArInternalMetadatum provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ArInternalMetadatum) Reload(exec boil.Executor) error {
	ret, err := FindArInternalMetadatum(exec, o.Key)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArInternalMetadatumSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ArInternalMetadatumSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArInternalMetadatumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArInternalMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), arInternalMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ar_internal_metadata`.* FROM `ar_internal_metadata` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, arInternalMetadatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArInternalMetadatumSlice")
	}

	*o = slice

	return nil
}

// ArInternalMetadatumExistsG checks if the ArInternalMetadatum row exists.
func ArInternalMetadatumExistsG(key string) (bool, error) {
	return ArInternalMetadatumExists(boil.GetDB(), key)
}

// ArInternalMetadatumExists checks if the ArInternalMetadatum row exists.
func ArInternalMetadatumExists(exec boil.Executor, key string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ar_internal_metadata` where `key`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, key)
	}

	row := exec.QueryRow(sql, key)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ar_internal_metadata exists")
	}

	return exists, nil
}
